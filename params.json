{"name":"Projet P1 - Partie Informatique","tagline":"","body":"# 1) Comment programmer son robot :\r\n\r\nLa librairie concernant le fonctionnement des robots Lego est détaillée à [cette page](http://lejos.sourceforge.net/nxt/nxj/api/index.html )\r\nCelle-ci contient de nombreuses classes spécifiques aux fonctionnalités du NXT, groupées dans les packages dont le nom commence par « lejos » (n’oubliez pas les « import » correspondants dans votre programme !). Le présent document n'a pas pour but de détailler toutes les possibilités de ces classes, mais donne un aperçu succinct et partiel des possibilités offertes par ces classes et méthodes.\r\n\r\n\r\n# 2) Les senseurs\r\nLa classe **lejos.nxt.SensorPort** représente un un port d’entrée du NXT. Il y a quatre instances prédéfinies de la classe **SensorPort**, correspondant aux quatre ports d'entrée : **SensorPort.S1**, **SensorPort.S2**, **SensorPort.S3** et **SensorPort.S4**. \r\nIl existe également une classe correspondant à chaque type de senseur : \r\n- Capteur tactile : classe **lejos.nxt.TouchSensor**\r\n- Capteur sonore : classe **lejos.nxt.SoundSensor**\r\n- Capteur photosensible : classe **lejos.nxt.LightSensor**\r\n- Capteur de distance à ultrasons : classe **lejos.nxt.UltrasonicSensor**\r\n\r\nLe constructeur de chacune de ces classes prend comme paramètre le **SensorPort** auquel le senseur est connecté. Chaque classe fournit une ou plusieurs méthodes permettant de lire la mesure du senseur correspondant. Exemple : \r\n```java\r\nimport lejos.nxt.*; \r\nUltrasonicSensor sonic = new UltrasonicSensor(SensorPort.S1); \r\n              \t // capteur à ultrasons connecté au port S1. \r\nTouchSensor touch = new TouchSensor(SensorPort.S2); \r\n                // capteur tactile connecté au port S2. \r\nif (touch.isDown()) { // si le capteur tactile est touché,\r\n          System.out.println(\" \" + sonic.getDistance()); \r\n             // affiche la distance vue par le capteur à ultrasons \r\n} \r\n```\r\n\r\n# 3) Les moteurs\r\nLa classe **lejos.nxt.Motor** permet d'accéder aux moteurs NXT. Elle fournit trois instances prédéfinies (de type **NXTRegulatedMotor**), correspondant aux trois ports de sortie du NXT : **Motor.A**,** Motor.B** et **Motor.C**.\r\nLa classe **NXTRegulatedMotor** représente un moteur. La méthode **setSpeed** permet d’ajuster la vitesse du moteur. Les moteurs NXT sont équipés d’un capteur de rotation intégré (tachymètre) qui permet d’offrir une large palette de méthodes différentes. Les méthodes **getTachoCount** et **resetTachoCount** permettent de lire et de remettre à zéro le compteur de rotation. Les autres méthodes, telles que **rotate**, utilisent également ce compteur pour contrôler précisément le nombre de rotations du moteur. \r\nLes mouvements du moteur s'effectuent à leur vitesse propre, distincte de (et beaucoup plus lente que) la vitesse d'exécution du programme Java. Il existe deux types de méthodes permettant de commander le mouvement du moteur. Il s'agit des **méthodes bloquantes** et des **méthodes non-bloquantes** : \r\n• Pour une méthode bloquante, l'amplitude du mouvement (nombre de degrés, de tours, distance, ...) est pré-déterminée et la méthode attend jusqu'à la fin du mouvement (exemple : Motor.A.rotate(90)). Durant ce temps, l'exécution du programme est suspendue; il ne peut pas, par exemple, détecter un obstacle et arrêter prématurément le mouvement. \r\n• Les méthodes bloquantes rotate et rotateTo font tourner le moteur d'un angle donné ou jusqu'à un angle donné. Lorsque la rotation demandée est terminée, le programme passe à l'instruction suivante. Exemple : ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}